# classify-imageの設定ファイル
# UTF-8で記述すること

[FolderName]
# 解析対象の画像があるフォルダ名
dataset = dataset

# 分割したデータのファイル名が記載されたcsvファイルのフォルダ
split_info = split

# 訓練(train)用画像、評価(test)用画像が出力されるフォルダ
# どちらも解析終了後に削除される
train = train
test = test

[CSV]
# dasasetフォルダの中身(=解析対象のファイル)の扱い方を記述したcsvファイルの名前
csv_filename = hogehoge.csv

# 画像ファイルの名前, 個人ID, 分類ラベルの書かれた列の名前
# 個人ID列を用意しない場合は空文字列とすること(例: ID_column =)
# 個人ID列を指定した場合、同じ個人IDの画像は学習データとテストデータにまたがって存在しないようにされる
image_filename_column = filename
label_column = KW
ID_column = ID

[NetworkUsing]
# 解析に使うモデルのネットワーク構造
# 使用する構造はTrue、使用しない構造はFalse
VGG16 = True
VGG19 = False
DenseNet121 = False
DenseNet169 = False
DenseNet201 = False
InceptionResNetV2 = False
InceptionV3 = False
ResNet50 = False
Xception = False


[ImageSize]
# 画像サイズ(解像度)
width = 224
height = 224


[HyperParameter]
# バッチサイズの指定。重たい時には少なくする。
batch_size = 32

# エポック数
epochs = 20


[DataGenerate]
# 9種類の中からランダムに(NUM_OF_AUGS)種類の処理を行う。
num_of_augs = 5
# Falseなら左右反転無し、Trueなら左右反転してデータ数を２倍にする。
use_flip = True


[ImageDataGenerator]
# data拡張の際(ImageDataGenerator)の引数 (基本的にそのままで良い)
# cf. 画像の前処理 - Keras Documentation
#     https://keras.io/ja/preprocessing/image/
rotation_range = 2
width_shift_range = 0.01
height_shift_range = 0.01
shear_range = 0
zoom_range = 0.1


[Validation]
# k-Fold法の分割数
# 2以上の整数とすること
k = 5


[Analysis]
# 統計解析の信頼区間
alpha = 0.95


[etc]
# colabとdriveの同期を待つ時間(秒単位)
# ローカルでこのコードを実行する場合、待つ必要はないので0を推奨
wait_sec = 120
